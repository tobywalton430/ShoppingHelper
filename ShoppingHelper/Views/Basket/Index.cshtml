
@{
    ViewBag.Title = "Index";
}

<style type="text/css">


    .failfailfail {
        background-color: #ed9292;
    }



    input, button {
        outline: none;
    }

    .inputWithButton {
        display: inline-block;
        overflow: hidden;
        border: 1px solid gray;
        border-radius: 10px;
    }

        .inputWithButton > * {
            vertical-align: top;
            border: 0;
            margin: 0;
            padding: 3px 10px;
        }

        .inputWithButton > input[type=text] {
            width: 150px;
        }

        .inputWithButton > button {
            border-left: 1px solid gray;
            background: #eee;
            cursor: pointer;
            width: auto;
            padding: 10px 20px;
        }

            .inputWithButton > button::-moz-focus-inner {
                border: 0;
            }
</style>

<script type="text/javascript">

    function AppViewModel() {

        var appViewModel = this;

        //appViewModel.enableValidation = ko.observable(false);

        appViewModel.productName = ko.observable();
        appViewModel.categoryName = ko.observable();
        appViewModel.selectedCategory = ko.observable();

        appViewModel.productData = ko.observableArray();
        appViewModel.categoryData = ko.observableArray();
        appViewModel.basketContents = ko.observableArray();

        appViewModel.getProductData = function () {
            var options = {
                url: "/Basket/ProductData",
                type: "get"
            };

            $.ajax(options).done(function (data) {
                appViewModel.productData(data);
                $("#addProduct").autocomplete({
                    source: function (request, response) {
                        response($.grep(appViewModel.productData(), function (value) {
                            return value.Name.toLowerCase().indexOf(request.term.toLowerCase()) >= 0
                        }));
                    },
                    select: function (event, ui) {
                        appViewModel.basketContents.push(ui.item);
                    }
                }).data("ui-autocomplete")._renderItem = function (ul, item) {
                    return $("<li>").data("item.autocomplete", item).append("<a>" + item.Name + "</a>").appendTo(ul);
                };
            });
        }

        appViewModel.getCategoryData = function () {
            var options = {
                url: "/Basket/CategoryData",
                type: "get"
            };

            $.ajax(options).done(function (data) {
                appViewModel.categoryData(data);
            });
        }

        appViewModel.addProduct = function () {
            var options = {
                url: "/Basket/AddProduct",
                type: "post",
                data: {
                    categoryID: appViewModel.selectedCategory(),
                    name: appViewModel.productName()
                }
            };

            $.ajax(options).done(function (data) {
                appViewModel.getProductData();
            });
        }

        appViewModel.addCategory = function () {

            appViewModel.categoryName.extend({ required: true });

            if (appViewModel.categoryName.isValid()) {
                var options = {
                    url: "/Basket/AddCategory",
                    type: "post",
                    data: {                    
                        name: appViewModel.categoryName()
                    }
                };

                $.ajax(options).done(function (data) {
                    appViewModel.getCategoryData();
                });
            } else {
                console.log("INVALID!!!");
            }
        }

        appViewModel.initialize = function () {
            appViewModel.getCategoryData();
            appViewModel.getProductData();
        }















        appViewModel.errors = ko.validation.group(appViewModel).showAllMessages(false);
        appViewModel.validate = function () {
            console.log("VALIDATING MODEL...");
            //appViewModel.errors.showAllMessages();
        }


        appViewModel.initialize();

    }

    $(function () {

        ko.validation.configure({
            decorateElement: true,
            insertMessages: false
        });

        ko.bindingHandlers.validationElement = {
            update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var valueIsValid = valueAccessor().isValid();
                if (!valueIsValid) {
                    $(element).addClass("failfailfail");
                } else {
                    $(element).removeClass("failfailfail");
                }
            }
        }

        ko.applyBindings(new AppViewModel());
    })

    //$("form").submit(function () {
    //    var $form = $(this);
    //    return false;
    //})

</script>

<h2>Index</h2>

<form methd="get" action="@Url.Action("ProductData")">    
    <input type="text" id="addProduct" data-bind="value: productName" />    
    <select data-bind="options: categoryData, optionsText: 'Name', optionsValue: 'ID', value: selectedCategory" />
    <input type="submit" value="Add New Product" data-bind="click: addProduct" />
</form>

<!-- ko foreach: basketContents -->
    <p data-bind="text: Name"></p>
<!-- /ko -->

<br />
<br />
<br />
<br />

<h3>Add Category</h3>

<form>
    <div>
        <label for="categoryName">Name</label>            
    </div>    
    <span class="inputWithButton" data-bind="validationElement: categoryName">
        @*<input type="text" id="categoryName" data-bind='value: categoryName, validationOptions: { errorElementClass: "failfailfail" }' />*@
        <input type="text" id="categoryName" data-bind='value: categoryName' />
        <button data-bind="click: addCategory">Add</button>
        @*<button data-bind="click: validate">Add</button>*@
    </span>        
</form>

@*<button class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only">
    <span>My Button</span>
</button>*@

